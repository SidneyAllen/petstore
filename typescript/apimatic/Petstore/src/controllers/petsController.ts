/**
 * PetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { CustomError } from '../errors/customError';
import { Pet, petSchema } from '../models/pet';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class PetsController extends BaseController {
  /**
   * List all pets
   *
   * @param limit How many items to return at one time (max 100)
   * @return Response from the API call
   */
  async listPets(
    limit?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Pet[]>> {
    const req = this.createRequest('GET', '/pets');
    const mapped = req.prepareArgs({ limit: [limit, optional(number())] });
    req.query('limit', mapped.limit);
    req.defaultToError(CustomError);
    return req.callAsJson(array(petSchema), requestOptions);
  }

  /**
   * Create a pet
   *
   * @return Response from the API call
   */
  async createPets(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/pets');
    req.defaultToError(CustomError);
    return req.call(requestOptions);
  }

  /**
   * Info for a specific pet
   *
   * @param petId The id of the pet to retrieve
   * @return Response from the API call
   */
  async showPetById(
    petId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Pet>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ petId: [petId, string()] });
    req.appendTemplatePath`/pets/${mapped.petId}`;
    req.defaultToError(CustomError);
    return req.callAsJson(petSchema, requestOptions);
  }
}
